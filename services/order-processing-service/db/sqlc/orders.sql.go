// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  id,
  customer_id,
  amount,
  description,
  status
  -- created_at and updated_at have defaults
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, customer_id, amount, description, status, created_at, updated_at
`

type CreateOrderParams struct {
	ID          uuid.UUID   `json:"id"`
	CustomerID  string      `json:"customer_id"`
	Amount      float64     `json:"amount"`
	Description pgtype.Text `json:"description"`
	Status      pgtype.Text `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.CustomerID,
		arg.Amount,
		arg.Description,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Amount,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, amount, description, status, created_at, updated_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Amount,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_id, amount, description, status, created_at, updated_at FROM orders
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Amount,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderDetails = `-- name: UpdateOrderDetails :one
UPDATE orders
SET
  amount = COALESCE($1, amount),
  description = COALESCE($2, description),
  status = COALESCE($3, status),
  updated_at = NOW()
WHERE id = $4
RETURNING id, customer_id, amount, description, status, created_at, updated_at
`

type UpdateOrderDetailsParams struct {
	Amount      pgtype.Float8 `json:"amount"`
	Description pgtype.Text   `json:"description"`
	Status      pgtype.Text   `json:"status"`
	ID          uuid.UUID     `json:"id"`
}

// Example for a more complex update if needed, e.g., updating multiple fields
func (q *Queries) UpdateOrderDetails(ctx context.Context, arg UpdateOrderDetailsParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderDetails,
		arg.Amount,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Amount,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, customer_id, amount, description, status, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     uuid.UUID   `json:"id"`
	Status pgtype.Text `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Amount,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
