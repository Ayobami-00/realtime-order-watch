package repository

import (
	"context"

	"github.com/Ayobami-00/realtime-order-watch/services/order-processing-service/db/sqlc" // SQLC generated package
	"github.com/Ayobami-00/realtime-order-watch/services/order-processing-service/pb"       // Protobuf generated package
	"github.com/google/uuid"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// OrderRepository defines the interface for order data operations.
// It will use the methods generated by SQLC.
type OrderRepository interface {
	CreateOrder(ctx context.Context, arg db.CreateOrderParams) (db.Order, error)
	GetOrder(ctx context.Context, orderID uuid.UUID) (db.Order, error)
	ListOrders(ctx context.Context, arg db.ListOrdersParams) ([]db.Order, error)
	UpdateOrderStatus(ctx context.Context, arg db.UpdateOrderStatusParams) (db.Order, error)
	// Add other methods like DeleteOrder if needed
}

// SQLCOrderRepository is an implementation of OrderRepository using SQLC.
type SQLCOrderRepository struct {
	store db.Store // SQLC generated Store interface
}

// NewSQLCOrderRepository creates a new SQLCOrderRepository.
func NewSQLCOrderRepository(store db.Store) OrderRepository {
	return &SQLCOrderRepository{store: store}
}

// CreateOrder calls the SQLC generated CreateOrder method.
func (r *SQLCOrderRepository) CreateOrder(ctx context.Context, arg db.CreateOrderParams) (db.Order, error) {
	// Potentially add tracing/logging here specific to repository layer if needed
	return r.store.CreateOrder(ctx, arg)
}

// GetOrder calls the SQLC generated GetOrder method.
func (r *SQLCOrderRepository) GetOrder(ctx context.Context, orderID uuid.UUID) (db.Order, error) {
	return r.store.GetOrder(ctx, orderID)
}

// ListOrders calls the SQLC generated ListOrders method.
func (r *SQLCOrderRepository) ListOrders(ctx context.Context, arg db.ListOrdersParams) ([]db.Order, error) {
	return r.store.ListOrders(ctx, arg)
}

// UpdateOrderStatus calls the SQLC generated UpdateOrderStatus method.
func (r *SQLCOrderRepository) UpdateOrderStatus(ctx context.Context, arg db.UpdateOrderStatusParams) (db.Order, error) {
	return r.store.UpdateOrderStatus(ctx, arg)
}

// Helper function to convert db.Order (SQLC model) to pb.Order (Protobuf model)
// This is crucial because the gRPC handlers will work with Protobuf types.
func ConvertDBOrderToPBOrder(dbOrder db.Order) *pb.Order {
	return &pb.Order{
		OrderId:     dbOrder.ID.String(),
		CustomerId:  dbOrder.CustomerID,
		Amount:      dbOrder.Amount,
		Description: dbOrder.Description.String, // Assuming description is nullable
		Status:      dbOrder.Status.String,     // Assuming status is nullable or handle appropriately
		CreatedAt:   timestamppb.New(dbOrder.CreatedAt),
		UpdatedAt:   timestamppb.New(dbOrder.UpdatedAt),
	}
}

func ConvertDBOrdersToPBOrders(dbOrders []db.Order) []*pb.Order {
	pbOrders := make([]*pb.Order, len(dbOrders))
	for i, dbOrder := range dbOrders {
		pbOrders[i] = ConvertDBOrderToPBOrder(dbOrder)
	}
	return pbOrders
}
