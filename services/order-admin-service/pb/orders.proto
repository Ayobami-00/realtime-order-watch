syntax = "proto3";

package orders; // Protobuf package name

// The go_package option tells protoc where to output the Go files
// and what the Go package name should be.
// Format: "module_path/path/to/directory_for_pb_files;go_package_name"
option go_package = "github.com/Ayobami-00/realtime-order-watch/order-admin-service/pb;orderspb"; // Adjusted for order-admin-service

import "google/protobuf/timestamp.proto";

// Order message represents an order in the system
message Order {
  string order_id = 1;
  string customer_id = 2;
  double amount = 3;
  string description = 4;
  string status = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

// Service to manage orders
service OrderService {
  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse);
  rpc ListOrders(ListOrdersRequest) returns (ListOrdersResponse);
  rpc UpdateOrderStatus(UpdateOrderStatusRequest) returns (UpdateOrderStatusResponse);
  rpc StreamOrders(StreamOrdersRequest) returns (stream Order); // RPC for streaming orders
  // rpc DeleteOrder(DeleteOrderRequest) returns (DeleteOrderResponse); // Placeholder for future
}

// --- CreateOrder RPC ---
message CreateOrderRequest {
  string customer_id = 1;
  double amount = 2;
  string description = 3;
  // Initial status will be set by the server
}

message CreateOrderResponse {
  Order order = 1;
}

// --- GetOrder RPC ---
message GetOrderRequest {
  string order_id = 1;
}

message GetOrderResponse {
  Order order = 1;
}

// --- ListOrders RPC ---
message ListOrdersRequest {
  int32 limit = 1;  // Number of orders to return
  int32 offset = 2; // Number of orders to skip for pagination
  // Optional: Add filters like string status = 3; string customer_id = 4;
}

message ListOrdersResponse {
  repeated Order orders = 1;
  int32 total_count = 2; // Total number of orders matching criteria (for pagination UI)
}

// --- UpdateOrderStatus RPC ---
message UpdateOrderStatusRequest {
  string order_id = 1;
  string status = 2;
}

message UpdateOrderStatusResponse {
  Order order = 1;
}

// --- StreamOrders RPC ---
message StreamOrdersRequest {
  // Future: Add filters like status, customer_id, etc.
  // For now, it streams all new/updated orders.
}

// --- DeleteOrder RPC (Placeholder) ---
message DeleteOrderRequest {
  string order_id = 1;
}

message DeleteOrderResponse {
  Order order = 1;
}
